/**

 \page page_setting_dialog Settings Dialog

 \tableofcontents

 <img src="w_settings.png" align="left" hspace="10" vspace="10" />
 \image latex w_settings.png

 The settings dialog combines application preferences
 and project setting in a compact set of six tabs.

 The *General* tab contains a collection of application wide setting. They are
 stored in the user preferences.

 The *Project* tab holds settings for the current project. They are saved with
 the `.fl` file.

 The *Layout* tab manages databases of preferred widget alignment. These
 preferences can be saved per user, or as part of the project, or exported for
 use in other projects.

 The *Shell* tabs manages databases of quick access shell commands and scripts.
 Shell commands can be saved as a user preference and also as part of the
 `.fl` project file.

 The *Locale* tab set the method of internationalizing texts in the project,
 commonly used for labels and tooltips.

 The *User* tab manages customization of fonts and colors in the widget browser.
 Setting are stored as user preferences.

 <div style="clear:both;"></div>

 <!-- ---------------------------------------------------------------------- -->
 \section setting_general Application Settings

 <img src="w_settings_general_tab.png" align="left" hspace="10" vspace="10" />
 \image latex w_settings_general_tab.png

 __Scheme__ :

 Select one of the graphics schemes built into FLTK. It's helpful
 to verify the look of various schemes for an application design.

 __Options__:

 Various options to make life as a developer more convenient.

 __Recent Files__:

 FLUID keeps track of recently opened files.

 __External Editor__:

 Users that don't like the built-in FLUID code editor can enter a shell command
 here that opens the content of Code nodes in an external editor. FLUID does
 its best to pick up on changed content or when the editor is closed.

 __Overlays__:

 The *Position Guides* are little red arrows that indicate if snap points are
 found. See the *Layout* tab for details. *Restricted Areas* are areas where
 widgets from within the same group overlap. They are visible in the project
 window as a diagonally hashed pattern. *Ghosted Group Outlines* show faint
 frames around groups that would otherwise be invisible in the project window.

 <div style="clear:both;"></div>

 <!-- ---------------------------------------------------------------------- -->
 \section setting_project Project Settings

 <img src="w_settings_project_tab.png" align="left" hspace="10" vspace="10" />
 \image latex w_settings_project_tab.png

 __Header File__, __Code File__:

 These fields are used to build the file path and name of the generated header
 and source file. If one field is empty the value defaults to `.h` and `.cxx`
 respectively. If a name starts with a `.`, FLUID assumes that the rest of the
 text is a file extension. The code file name is then generated by replacing
 the extension of the `.fl` file name.

 \todo Explain the entire process of calculating the path.

 __Include Header from Code__:

 If checked, an include statement is generated close to the start of the
 source file.

 __Menu shortcuts use FL_COMMAND__:

 Setting this option will replace FL_CTRL and FL_META as a modifier for
 shortcuts with the platform aware modifiers FL_COMMAND and FL_CONTROL.

 __allow Unicode__:

 If unchecked, Unicode characters in string are escaped, If checked, the Unicode
 character is stored in the source code in UTF-8 encoding.

 __avoid early include__:

 FLUID by default includes `<FL/Fl.H>` early in the header file. If this option
 is checked, users can include other files before including the FL header. The
 user must then include `<FL/Fl.H>` later with a Declaration node.

  <div style="clear:both;"></div>

 <!-- ---------------------------------------------------------------------- -->
 \section setting_layout Layout Preferences

 <img src="w_settings_layout_tab.png" align="left" hspace="10" vspace="10" />
 \image latex w_settings_layout_tab.png

 Layouts are a collection of hints that help when interactively positioning and
 resizing widgets in the project window. Layouts come in a set of three for
 the application window, for dialog boxes, and for toolboxes.

 __Layout__:

 The layout pulldown menu lets users choose from a list of existing layouts.
 The plus button creates a new set of layouts based on the currently selected.
 The pulldown menu has items to rename, load, and save layouts. It can also
 change the location where the layout is stored. The FLUID beaker is for
 internal layouts, the portrait icon stores as user preference,, the document
 icon stores the layout in the `.fl` file, and the disk icon lets users store
 layout in external files.

 __Window Margin and Grid__:

 Snap widget position to that margin in relation to the window. The grid
 snaps widgets to fixed intervals.

 __Group Margin and Grid__:

 Snap widget position to that margin in relation to the group. The grid
 snaps widgets to fixed intervals relative to the top left of the group.

 __Tabs Margin__:

 Snap the tab in side `Fl_Tabs` to the tab border and the offset given in
 Margins.

 __Widget Minimum, Increment, and Gap__:

 Minimum set the minimal width of a widget. Increment is the size multiplier
 on top of the Minimum value. Gap is the preferred distance to other widgets
 in the same group

  __Label Font__, __Text Font__:

  The preferred label and text font for new widgets.

  <div style="clear:both;"></div>

 <!-- ---------------------------------------------------------------------- -->
 \section setting_shell Shell Commands

 <img src="w_settings_shell_tab.png" align="left" hspace="10" vspace="10" />
 \image latex w_settings_shell_tab.png

 __Shell Command List__:

 A list of all currently available shell commands. The portrait symbol in front
 of the name indicates that the script is stored in the user preferences. The
 document symbol saves them within the `.fl` project file.

 `[+]` add a fresh new script to the list, `[++]` duplicates the currently
 selected script. `[DEL]` deletes it, and `[v]` offers import and export
 functionality. The `[T]` button shows the terminal window, and finally the
 `[>]` button runs the selected shell script.

 Selecting a shell script will fill in the bottom half of the dialog.

 __Name__:

 This is the name of the script as it appears in the prowser.

 __Menu Label__:

 Shell scripts that match the *Condition* flag are also available for quick
 access in the *Shell* menu in the main window. This is the text that is used
 for the menu entry.

 __Shortcut__:

 Assign a keyboard shortcut to this shell script for even faster access. FLUID
 does not check if a shortcut is already used elsewhere. Try to avoid
 collisions, especially when the script is part of a project file.

 __Store__:

 Choose where to store the settings of this shell script, either in the user
 preferences or as part of the `.fl` project file.

 __Condition__:

 Shell scripts can be quite different for different platforms hosting FLUID.
 This choice limits scripts to specific platforms. Multiple scripts can have
 the same shortcut if they have different conditions.

 __Shell Script__:

 This is a text field for the shell script. The `[v]` pulldown menu has a list
 of variables that are replaced with the corresponding value before running
 the script. The zoom button gives access to a much larger shell script editor.

 The options below are a list of actions that will be executed before running
 the script if checked.

  <div style="clear:both;"></div>

 <!-- ---------------------------------------------------------------------- -->
 \section setting_i18n Internationalization

 The *Locale* tab can be used to configure optional internationalization.
 FLUID support GNU `gettext` and Posix `catgets`.

 \image html w_settings_i18n_gnu.png
 \image latex w_settings_i18n_gnu.png

 The GNU gettext option adds some preprocessor code to the source file
 ```
 #include <libintl.h>
 #ifndef gettext_noop
 #  define gettext_noop(text) text
 #endif
 ```
 and the gettext call around strings in the source code:
 ```
 new Fl_Button(50, 50, 54, 40, "Button");
 // ->
 new Fl_Button(50, 50, 54, 40, gettext("Button"));
 ```

 __Include__: include this header file

 __Conditional__: include the header file only if this preprocessor macro is
 defined.

 __Function__: use this function to change text from one language to another.

 __Static Function__: some texts, the labels in `Fl_Menu_Item` for example, are
 assigned before the gettext database is loaded. These are marked with
 `gettext_noop` and will be updated when the menu is assigned to an `Fl_Menu_`
 derived widget.

 \image html w_settings_i18n_psx.png
 \image latex w_settings_i18n_psx.png

 The  Posix catgets option adds some preprocessor code to the source file
 ```
 #include <nl_types.h>
 // Initialize I18N stuff now for menus...
 #include <locale.h>
 static char *_locale = setlocale(LC_MESSAGES, "");
 static nl_catd _catalog = catopen("", 0);
 ```
 and the catgets call around strings in the source code:
 ```
 new Fl_Button(50, 50, 54, 40, "Button");
 // ->
 new Fl_Button(50, 50, 54, 40, catgets(_catalog,1,6,"Button"));
 ```

 __Include__: include this header file

 __Conditional__: include the header file only if this preprocessor macro is
 defined.

 __Catalog__: the name of the external `nl_catd` catalog.

 __Set__: the number of the set within the catalog

 <!-- ---------------------------------------------------------------------- -->
 \section setting_user User Interface Preferences

 <img src="w_settings_user_tab.png" align="left" hspace="10" vspace="10" />
 \image latex w_settings_user_tab.png

 This tab lets users change the font and color of text in the widget browser.
 The settings are stored in the user preferences.

 All changes are directly visible in the widget browser.

 <div style="clear:both;"></div>

 */
