# data file for the Fltk User Interface Designer (fluid)
version 1.0400
header_name {.h}
code_name {.cxx}
comment {//
// Setting and shell dialogs for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2020 by Bill Spitzak and others.
//
// This library is free software. Distribution and use rights are outlined in
// the file "COPYING" which should have been included with this file.  If this
// file is missing or damaged, see the license at:
//
//     https://www.fltk.org/COPYING.php
//
// Please see the following page on how to report bugs and issues:
//
//     https://www.fltk.org/bugs.php
//
} {in_source in_header
}

decl {\#include "fluid.h"} {public global
}

decl {\#include "widget_browser.h"} {public global
}

decl {\#include "Fd_Snap_Action.h"} {public global
}

decl {\#include "shell_command.h"} {public global
}

decl {\#include <FL/Fl_Text_Buffer.H>} {public local
}

decl {\#include <FL/Fl_Text_Display.H>} {public local
}

decl {\#include <FL/filename.H>} {public local
}

decl {\#include <FL/Fl_Scheme_Choice.H>} {public local
}

decl {\#include <FL/Fl_Preferences.H>} {private global
}

decl {\#include <FL/fl_ask.H>} {private global
}

decl {\#include <string.h>} {private global
}

decl {void init_scheme(void);} {
  comment {// initialize the scheme from preferences} public global
}

decl {extern struct Fl_Menu_Item *dbmanager_item;} {public local
}

Function {make_project_window()} {open
} {
  Fl_Window project_window {
    label {Project Settings} open
    xywh {472 246 399 298} type Double
    code0 {\#include <FL/Fl_Preferences.H>}
    code1 {\#include <FL/Fl_Tooltip.H>} modal visible
  } {
    Fl_Button {} {
      label Close
      callback {project_window->hide();
set_modflag(-1, -1);}
      tooltip {Close this dialog.} xywh {328 267 60 25}
    }
    Fl_Tabs {} {open
      xywh {10 10 379 246} selection_color 12 labelcolor 7
    } {
      Fl_Group {} {
        label Output open
        xywh {10 36 379 220} hide
      } {
        Fl_Box {} {
          label {Use "name.ext" to set a file name or just ".ext" to set extension.}
          xywh {20 49 340 49} align 148
        }
        Fl_Input header_file_input {
          label {Header File:}
          user_data 1 user_data_type {void*}
          callback header_input_cb
          tooltip {The name of the generated header file.} xywh {119 103 252 20} box THIN_DOWN_BOX labelfont 1 when 1 textfont 4
        }
        Fl_Input code_file_input {
          label {Code File:}
          user_data 1 user_data_type {void*}
          callback code_input_cb
          tooltip {The name of the generated code file.} xywh {119 128 252 20} box THIN_DOWN_BOX labelfont 1 when 1 textfont 4
        }
        Fl_Check_Button include_H_from_C_button {
          label {Include Header from Code}
          callback include_H_from_C_button_cb
          tooltip {Include the header file from the code file.} xywh {117 153 272 20} down_box DOWN_BOX
        }
        Fl_Check_Button use_FL_COMMAND_button {
          label {Menu shortcuts use FL_COMMAND}
          callback use_FL_COMMAND_button_cb
          tooltip {Replace FL_CTRL and FL_META with FL_COMMAND when generating menu shortcuts} xywh {117 176 272 20} down_box DOWN_BOX
        }
        Fl_Check_Button utf8_in_src_button {
          label {allow Unicode UTF-8 in source code}
          callback utf8_in_src_cb
          tooltip {For older compilers, characters outside of the printable ASCII range are escaped using octal notation `\\0123`. If this option is checked, Fluid will write UTF-8 characters unchanged.} xywh {117 199 272 20} down_box DOWN_BOX
        }
        Fl_Check_Button avoid_early_includes_button {
          label {avoid early include of Fl.H}
          callback avoid_early_includes_cb
          tooltip {Do not emit \#include <FL//Fl.H> until it is needed by another include file.} xywh {117 222 272 20} down_box DOWN_BOX
        }
      }
      Fl_Group {} {
        label Internationalization open
        xywh {10 36 378 220}
      } {
        Fl_Choice i18n_type_chooser {
          label {Use:}
          callback i18n_type_cb open
          tooltip {Type of internationalization to use.} xywh {128 48 136 25} box THIN_UP_BOX down_box BORDER_BOX labelfont 1
        } {
          MenuItem {} {
            label None
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {GNU gettext}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {POSIX catgets}
            xywh {0 0 100 20}
          }
        }
        Fl_Input i18n_include_input {
          label {\#include:}
          callback i18n_text_cb
          tooltip {The include file for internationalization.} xywh {128 78 243 20} box THIN_DOWN_BOX labelfont 1 textfont 4
        }
        Fl_Input i18n_conditional_input {
          label {Conditional:}
          callback i18n_text_cb
          tooltip {only include the header file if this preprocessor macro is defined, for example FLTK_GETTEXT_FOUND} xywh {128 103 243 20} box THIN_DOWN_BOX labelfont 1 textfont 4
        }
        Fl_Input i18n_file_input {
          label {File:}
          callback i18n_text_cb
          tooltip {The name of the message catalog.} xywh {128 128 243 20} box THIN_DOWN_BOX labelfont 1 textfont 4
        }
        Fl_Input i18n_set_input {
          label {Set:}
          callback i18n_int_cb
          tooltip {The message set number.} xywh {128 153 243 20} type Int box THIN_DOWN_BOX labelfont 1 textfont 4
        }
        Fl_Input i18n_function_input {
          label {Function:}
          callback i18n_text_cb
          tooltip {The function to call to translate labels and tooltips, usually "gettext" or "_"} xywh {128 128 243 20} box THIN_DOWN_BOX labelfont 1 textfont 4
        }
        Fl_Input i18n_static_function_input {
          label {Static Function:}
          callback i18n_text_cb
          tooltip {function to call to translate static text, The function to call to internationalize labels and tooltips, usually "gettext_noop" or "N_"} xywh {128 153 243 20} box THIN_DOWN_BOX labelfont 1 textfont 4
        }
      }
    }
  }
}

decl {extern void i18n_cb(Fl_Choice *,void *);} {public local
}

decl {void scheme_cb(Fl_Scheme_Choice *, void *);} {public local
}

Function {make_settings_window()} {open
} {
  Fl_Window settings_window {
    label {GUI Settings} open
    xywh {701 666 360 355} type Double resizable
    code0 {o->size_range(o->w(), o->h());} non_modal visible
  } {
    Fl_Choice scheme_choice {
      label {Scheme: }
      callback scheme_cb open
      xywh {140 10 115 25} down_box BORDER_BOX labelfont 1
      code0 {init_scheme();}
      class Fl_Scheme_Choice
    } {}
    Fl_Group {} {open
      xywh {20 43 330 161} labelfont 1 align 0
    } {
      Fl_Box {} {
        label {Options: }
        xywh {140 43 1 25} labelfont 1 align 4
      }
      Fl_Check_Button tooltips_button {
        label {Show Tooltips}
        callback {Fl_Tooltip::enable(tooltips_button->value());
fluid_prefs.set("show_tooltips", tooltips_button->value());}
        xywh {138 43 113 25} down_box DOWN_BOX labelsize 12
        code0 {int b;}
        code1 {fluid_prefs.get("show_tooltips", b, 1);}
        code2 {tooltips_button->value(b);}
        code3 {Fl_Tooltip::enable(b);}
      }
      Fl_Check_Button completion_button {
        label {Show Completion Dialogs}
        callback {fluid_prefs.set("show_completion_dialogs", completion_button->value());}
        xywh {138 68 186 25} down_box DOWN_BOX labelsize 12
        code0 {int b;}
        code1 {fluid_prefs.get("show_completion_dialogs", b, 1);}
        code2 {completion_button->value(b);}
      }
      Fl_Check_Button openlast_button {
        label {Open Previous File on Startup}
        callback {fluid_prefs.set("open_previous_file", openlast_button->value());}
        xywh {138 93 214 25} down_box DOWN_BOX labelsize 12
        code0 {int b;}
        code1 {fluid_prefs.get("open_previous_file", b, 0);}
        code2 {openlast_button->value(b);}
      }
      Fl_Check_Button prevpos_button {
        label {Remember Window Positions}
        callback {fluid_prefs.set("prev_window_pos", prevpos_button->value());}
        xywh {138 118 209 25} down_box DOWN_BOX labelsize 12
        code0 {int b;}
        code1 {fluid_prefs.get("prev_window_pos", b, 1);}
        code2 {prevpos_button->value(b);}
      }
      Fl_Check_Button show_comments_button {
        label {Show Comments in Browser}
        callback {show_comments = show_comments_button->value();
fluid_prefs.set("show_comments", show_comments);
redraw_browser();}
        xywh {138 143 209 25} down_box DOWN_BOX labelsize 12
        code1 {fluid_prefs.get("show_comments", show_comments, 1);}
        code2 {show_comments_button->value(show_comments);}
      }
    }
    Fl_Spinner recent_spinner {
      label {\# Recent Files: }
      callback {fluid_prefs.set("recent_files", recent_spinner->value());
load_history();}
      xywh {140 173 40 25} labelfont 1 when 1
      code0 {int c;}
      code1 {fluid_prefs.get("recent_files", c, 5);}
      code2 {recent_spinner->maximum(10);}
      code3 {recent_spinner->value(c);}
    }
    Fl_Group {} {open
      xywh {10 210 337 95} box THIN_UP_BOX color 47 resizable
    } {
      Fl_Check_Button use_external_editor_button {
        label {Use external editor?}
        callback {G_use_external_editor = use_external_editor_button->value();
fluid_prefs.set("use_external_editor", G_use_external_editor);
redraw_browser();}
        xywh {25 218 209 22} down_box DOWN_BOX labelsize 12
        code1 {fluid_prefs.get("use_external_editor", G_use_external_editor, 0);}
        code2 {use_external_editor_button->value(G_use_external_editor);}
      }
      Fl_Input editor_command_input {
        label {Editor Command}
        callback {strncpy(G_external_editor_command, editor_command_input->value(), sizeof(G_external_editor_command)-1);
G_external_editor_command[sizeof(G_external_editor_command)-1] = 0;
fluid_prefs.set("external_editor_command", G_external_editor_command);
redraw_browser();}
        tooltip {The editor command to open your external text editor.
Include any necessary flags to ensure your editor does not background itself.
Examples:
    gvim -f
    gedit
 emacs} xywh {25 264 305 21} labelsize 12 align 5 when 1 textsize 12
        code1 {fluid_prefs.get("external_editor_command", G_external_editor_command, "", sizeof(G_external_editor_command)-1);}
        code2 {editor_command_input->value(G_external_editor_command);}
      }
    }
    Fl_Button {} {
      label Close
      callback {settings_window->hide();}
      tooltip {Close this dialog.} xywh {285 320 64 25}
    }
  }
}

Function {make_shell_window()} {open
} {
  Fl_Window shell_window {
    label {Shell Command} open
    xywh {502 196 375 208} type Double resizable modal size_range {375 208 1024 208} visible
  } {
    Fl_Group {} {open
      xywh {0 0 375 165} resizable
    } {
      Fl_Input shell_command_input {
        label {Command:}
        tooltip {external shell command} xywh {82 14 277 20} labelfont 1 labelsize 12 textfont 4 textsize 12 resizable
      }
      Fl_Check_Button shell_savefl_button {
        label {save .fl project file}
        tooltip {save the project to the .fl file before running the command} xywh {82 39 136 19} down_box DOWN_BOX labelsize 12
      }
      Fl_Check_Button shell_writecode_button {
        label {save source code}
        tooltip {generate the source code and header file before running the command} xywh {82 59 120 19} down_box DOWN_BOX labelsize 12
      }
      Fl_Check_Button shell_writemsgs_button {
        label {save i18n strings}
        tooltip {save the internationalisation string before running the command} xywh {82 79 126 19} down_box DOWN_BOX labelsize 12
      }
      Fl_Check_Button shell_use_fl_button {
        label {use settings in .fl project files}
        callback {g_shell_use_fl_settings = shell_use_fl_button->value();
fluid_prefs.set("shell_use_fl", g_shell_use_fl_settings);
if (g_shell_use_fl_settings) {
  shell_settings_read();
} else {
  shell_prefs_get();
}
update_shell_window();}
        tooltip {check to read and write shell command from and to .fl files} xywh {82 110 180 19} down_box DOWN_BOX labelsize 12
      }
      Fl_Box {} {
        xywh {82 103 275 1} box BORDER_FRAME color 0
      }
      Fl_Group {} {open
        xywh {82 134 273 20}
      } {
        Fl_Button {} {
          label {save as default}
          callback {apply_shell_window();
shell_prefs_set();}
          tooltip {update the Fluid app settings for external shell commands to the current settings} xywh {82 134 104 20} labelsize 12
        }
        Fl_Box {} {
          xywh {186 136 169 15} resizable
        }
      }
    }
    Fl_Group {} {open
      xywh {0 160 375 48}
    } {
      Fl_Box {} {
        xywh {10 167 135 25} resizable
      }
      Fl_Return_Button {} {
        label Run
        callback {apply_shell_window();
do_shell_command(NULL, NULL);}
        tooltip {save selected files and run the command} xywh {145 167 100 25} labelsize 12
      }
      Fl_Button {} {
        label Cancel
        callback {shell_command_input->value(g_shell_command);
shell_window->hide();}
        xywh {255 167 100 25} labelsize 12
      }
    }
  }
  Fl_Window shell_run_window {
    label {Shell Command Output}
    xywh {455 590 555 430} type Double resizable visible
  } {
    Fl_Simple_Terminal shell_run_terminal {
      xywh {10 10 535 375} resizable
    }
    Fl_Group {} {open
      xywh {10 395 535 25}
    } {
      Fl_Box {} {
        xywh {10 395 435 25} hide resizable
      }
      Fl_Return_Button shell_run_button {
        label Close
        callback {Fl_Preferences pos(fluid_prefs, "shell_run_Window_pos");
pos.set("x", shell_run_window->x());
pos.set("y", shell_run_window->y());
pos.set("w", shell_run_window->w());
pos.set("h", shell_run_window->h());
shell_run_window->hide();}
        xywh {445 395 100 25}
      }
    }
  }
}

Function {make_layout_window()} {open
} {
  Fl_Window grid_window {
    label {Layout Settings}
    callback {propagate_load(o, v);} open
    xywh {478 283 520 573} type Double non_modal visible
  } {
    Fl_Button {} {
      label Close
      callback {if (v != LOAD) grid_window->hide();}
      tooltip {Close this dialog.} xywh {435 515 60 25}
    }
    Fl_Box {} {
      label {Widget Size:}
      xywh {241 367 107 25} labelfont 1 align 24
    }
    Fl_Group {} {open
      xywh {305 393 192 75}
    } {
      Fl_Round_Button {def_widget_size[0]} {
        user_data 8 user_data_type long
        callback default_widget_size_cb
        xywh {315 393 70 25} type Radio down_box ROUND_DOWN_BOX
      }
      Fl_Box {} {
        label tiny
        xywh {330 393 50 25} labelsize 8 align 20
      }
      Fl_Round_Button {def_widget_size[1]} {
        user_data 11 user_data_type long
        callback default_widget_size_cb
        xywh {402 393 70 25} type Radio down_box ROUND_DOWN_BOX
      }
      Fl_Box {} {
        label small
        xywh {418 393 50 25} labelsize 11 align 20
      }
      Fl_Round_Button {def_widget_size[2]} {
        user_data 14 user_data_type long
        callback default_widget_size_cb
        xywh {315 418 70 25} type Radio down_box ROUND_DOWN_BOX
      }
      Fl_Box {} {
        label normal
        xywh {330 418 50 25} align 20
      }
      Fl_Round_Button {def_widget_size[3]} {
        user_data 18 user_data_type long
        callback default_widget_size_cb
        xywh {402 418 90 25} type Radio down_box ROUND_DOWN_BOX
      }
      Fl_Box {} {
        label medium
        xywh {418 418 68 25} labelsize 18 align 20
      }
      Fl_Round_Button {def_widget_size[4]} {
        user_data 24 user_data_type long
        callback default_widget_size_cb
        xywh {315 443 75 25} type Radio down_box ROUND_DOWN_BOX
      }
      Fl_Box {} {
        label large
        xywh {330 443 64 25} labelsize 24 align 20
      }
      Fl_Round_Button {def_widget_size[5]} {
        user_data 32 user_data_type long
        callback default_widget_size_cb
        xywh {402 443 95 25} type Radio down_box ROUND_DOWN_BOX
      }
      Fl_Box {} {
        label huge
        xywh {418 443 76 25} labelsize 32 align 20
      }
    }
    Fl_Value_Input {} {
      label {left window margin:}
      callback {if (v == LOAD) {
  o->value((double)layout.left_window_margin);
} else {
  layout.left_window_margin = (int)o->value();
}}
      xywh {167 82 50 22} step 1
    }
    Fl_Value_Input {} {
      label {right window margin:}
      callback {if (v == LOAD) {
  o->value((double)layout.right_window_margin);
} else {
  layout.right_window_margin = (int)o->value();
}}
      xywh {167 112 50 22} step 1
    }
    Fl_Value_Input {} {
      label {top window margin:}
      callback {if (v == LOAD) {
  o->value((double)layout.top_window_margin);
} else {
  layout.top_window_margin = (int)o->value();
}}
      xywh {167 142 50 22} step 1
    }
    Fl_Value_Input {} {
      label {bottom window margin:}
      callback {if (v == LOAD) {
  o->value((double)layout.bottom_window_margin);
} else {
  layout.bottom_window_margin = (int)o->value();
}}
      xywh {167 172 50 22} step 1
    }
    Fl_Value_Input {} {
      label {window grid x:}
      callback {if (v == LOAD) {
  o->value((double)layout.window_grid_x);
} else {
  layout.window_grid_x = (int)o->value();
}}
      xywh {167 202 50 22} step 1
    }
    Fl_Value_Input {} {
      label {widget x min:}
      callback {if (v == LOAD) {
  o->value((double)layout.widget_min_w);
} else {
  layout.widget_min_w = (int)o->value();
}}
      xywh {167 270 50 22} step 1
    }
    Fl_Value_Input {} {
      label {widget x incr:}
      callback {if (v == LOAD) {
  o->value((double)layout.widget_inc_w);
} else {
  layout.widget_inc_w = (int)o->value();
}}
      xywh {167 300 50 22} step 1
    }
    Fl_Value_Input {} {
      label {widget x gap:}
      callback {if (v == LOAD) {
  o->value((double)layout.widget_gap_x);
} else {
  layout.widget_gap_x = (int)o->value();
}}
      xywh {167 330 50 22} step 1
    }
    Fl_Value_Input {} {
      label {widget y min:}
      callback {if (v == LOAD) {
  o->value((double)layout.widget_min_h);
} else {
  layout.widget_min_h = (int)o->value();
}}
      xywh {167 371 50 22} step 1
    }
    Fl_Value_Input {} {
      label {widget y incr:}
      callback {if (v == LOAD) {
  o->value((double)layout.widget_inc_h);
} else {
  layout.widget_inc_h = (int)o->value();
}}
      xywh {167 401 50 22} step 1
    }
    Fl_Value_Input {} {
      label {widget y gap:}
      callback {if (v == LOAD) {
  o->value((double)layout.widget_gap_y);
} else {
  layout.widget_gap_y = (int)o->value();
}}
      xywh {167 431 50 22} step 1
    }
    Fl_Value_Input {} {
      label {window grid y:}
      callback {if (v == LOAD) {
  o->value((double)layout.window_grid_y);
} else {
  layout.window_grid_y = (int)o->value();
}}
      xywh {167 232 50 22} step 1
    }
    Fl_Value_Input {} {
      label {left group margin:}
      callback {if (v == LOAD) {
  o->value((double)layout.left_group_margin);
} else {
  layout.left_group_margin = (int)o->value();
}}
      xywh {374 82 50 22} step 1
    }
    Fl_Value_Input {} {
      label {right group margin:}
      callback {if (v == LOAD) {
  o->value((double)layout.right_group_margin);
} else {
  layout.right_group_margin = (int)o->value();
}}
      xywh {374 112 50 22} step 1
    }
    Fl_Value_Input {} {
      label {top group margin:}
      callback {if (v == LOAD) {
  o->value((double)layout.top_group_margin);
} else {
  layout.top_group_margin = (int)o->value();
}}
      xywh {374 142 50 22} step 1
    }
    Fl_Value_Input {} {
      label {bottom group margin:}
      callback {if (v == LOAD) {
  o->value((double)layout.bottom_group_margin);
} else {
  layout.bottom_group_margin = (int)o->value();
}}
      xywh {374 172 50 22} step 1
    }
    Fl_Value_Input {} {
      label {top tabs margin:}
      callback {if (v == LOAD) {
  o->value((double)layout.top_tabs_margin);
} else {
  layout.top_tabs_margin = (int)o->value();
}}
      xywh {374 270 50 22} step 1
    }
    Fl_Value_Input {} {
      label {bottom tabs margin:}
      callback {if (v == LOAD) {
  o->value((double)layout.bottom_tabs_margin);
} else {
  layout.bottom_tabs_margin = (int)o->value();
}}
      xywh {374 300 50 22} step 1
    }
    Fl_Value_Input {} {
      label {group grid x:}
      callback {if (v == LOAD) {
  o->value((double)layout.group_grid_x);
} else {
  layout.group_grid_x = (int)o->value();
}}
      xywh {374 202 50 22} step 1
    }
    Fl_Value_Input {} {
      label {group grid y:}
      callback {if (v == LOAD) {
  o->value((double)layout.group_grid_y);
} else {
  layout.group_grid_y = (int)o->value();
}}
      xywh {374 232 50 22} step 1
    }
    Fl_Group {} {
      label {Label Font:}
      callback propagate_load open
      xywh {107 479 200 20} labelfont 1 labelsize 11 align 4
    } {
      Fl_Choice {} {open
        tooltip {The style of the label text.} xywh {107 479 152 20} box THIN_UP_BOX down_box BORDER_BOX labelfont 1 labelsize 11 textsize 11 resizable
        code0 {extern Fl_Menu_Item fontmenu[];}
        code1 {o->menu(fontmenu);}
      } {}
      Fl_Value_Input {} {
        tooltip {The size of the label text.} xywh {258 479 49 20} labelsize 11 maximum 100 step 1 value 14 textsize 11
      }
    }
    Fl_Group {} {
      label {Text Font:}
      callback propagate_load open
      xywh {107 507 200 20} labelfont 1 labelsize 11 align 4
    } {
      Fl_Choice {} {open
        tooltip {The value text style.} xywh {107 507 152 20} box DOWN_BOX down_box BORDER_BOX labelfont 1 labelsize 11 textsize 11 resizable
        code0 {extern Fl_Menu_Item fontmenu[];}
        code1 {o->menu(fontmenu);}
      } {}
      Fl_Value_Input {} {
        tooltip {The value text size.} xywh {258 507 49 20} labelsize 11 maximum 100 step 1 value 14 textsize 11
      }
    }
    Fl_Choice layout_choice {
      callback edit_layout_suite_cb open
      xywh {170 11 130 24} down_box BORDER_BOX
    } {
      MenuItem {} {
        label FLTK
        xywh {0 0 31 20}
      }
      MenuItem {} {
        label Grid
        xywh {0 0 31 20}
      }
    }
    Fl_Button {} {
      label {+}
      callback {// Clone the current layout suite

if (v == LOAD) return;

Fl_String old_name = "Copy of ";
old_name.append(g_layout_list[g_layout_list.current_suite()].name);
const char *new_name = fl_input("Enter a name for the new layout:", old_name.c_str());
if (new_name == NULL)
  return; 

g_layout_list.add(new_name);}
      xywh {300 11 24 24}
    }
    Fl_Menu_Button w_layout_menu {
      callback {if (v == LOAD) {
  Fd_Layout_Suite &suite = g_layout_list[g_layout_list.current_suite()];
  if (suite.is_static) {
    w_layout_menu_rename->deactivate();
    w_layout_menu_user_setting->deactivate();
    w_layout_menu_delete->deactivate();
  } else {
    w_layout_menu_rename->activate();
    w_layout_menu_user_setting->activate();
    w_layout_menu_delete->activate();
  }
  w_layout_menu_user_setting->value(suite.is_user_setting);
  w_layout_menu_project_setting->value(suite.is_project_setting);
}} open
      xywh {324 11 24 24}
    } {
      MenuItem w_layout_menu_rename {
        label {Rename...}
        callback {// Rename the current layout suite

Fl_String old_name = g_layout_list[g_layout_list.current_suite()].name;
const char *new_name = fl_input("Enter a new name for the layout:", old_name.c_str());
if (new_name == NULL)
  return; 

g_layout_list.rename(new_name);}
        xywh {0 0 31 20} divider
      }
      MenuItem w_layout_menu_load {
        label {Load...}
        xywh {0 0 31 20} deactivate
      }
      MenuItem w_layout_menu_save {
        label {Save...}
        xywh {0 0 31 20} deactivate divider
      }
      MenuItem w_layout_menu_user_setting {
        label {Save in User Settings}
        callback {Fd_Layout_Suite &suite = g_layout_list[g_layout_list.current_suite()];
if (!suite.is_static)
  suite.is_user_setting = o->value();} selected
        xywh {0 0 31 20} type Toggle
      }
      MenuItem w_layout_menu_project_setting {
        label {Save in Project File}
        callback {Fd_Layout_Suite &suite = g_layout_list[g_layout_list.current_suite()];
suite.is_project_setting = o->value();}
        xywh {0 0 31 20} type Toggle divider
      }
      MenuItem w_layout_menu_delete {
        label Delete
        callback {// remove the current suite

g_layout_list.remove(g_layout_list.current_suite());}
        xywh {0 0 31 20}
      }
    }
    Fl_Group {} {
      callback propagate_load open
      xywh {121 48 270 20}
    } {
      Fl_Button {preset_choice[0]} {
        label Application
        callback edit_layout_preset_cb
        xywh {121 48 90 20} type Radio value 1 selection_color 45 labelsize 12
      }
      Fl_Button {preset_choice[1]} {
        label Dialog
        callback edit_layout_preset_cb
        xywh {211 48 90 20} type Radio selection_color 45 labelsize 12
      }
      Fl_Button {preset_choice[2]} {
        label Toolbox
        callback edit_layout_preset_cb
        xywh {301 48 90 20} type Radio selection_color 45 labelsize 12
      }
    }
  }
  code {grid_window->do_callback(grid_window, LOAD);} {}
}
